name: Build, Push & Validate Infra

on:
  push:
    branches:
      - main
  pull_request: # PR時にもインフラの検証とplanを走らせる
    branches:
      - main

env:
  PROJECT_NAME: my-fastapi-app
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: my-fastapi-app-app-repo
  PUBLIC_SUBNET_CIDRS_JSON: ${{ toJson(vars.PUBLIC_SUBNET_CIDRS) }}
  PRIVATE_SUBNET_CIDRS_JSON: ${{ toJson(vars.PRIVATE_SUBNET_CIDRS) }}
  ECS_CLUSTER_NAME: my-fastapi-app-cluster
  ECS_SERVICE_NAME: my-fastapi-app-service
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write # OIDC認証に必要な権限
  contents: read  # リポジトリのコードを読み込むための権限
  pull-requests: write # PRにコメントするためにこの権限が必要

jobs:
  # ======================================================================
  # Job 1: DockerイメージのビルドとECRへのプッシュ
  # ======================================================================
  build_and_push:
    name: Build & Push
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- ★★★ここから新しいデバッグステップを追加★★★ ---
      - name: Debug - Show GitHub Repository Info
        run: |
          echo "GitHub Repository Owner: ${{ github.repository_owner }}"
          echo "GitHub Repository Name: ${{ github.repository }}"
      # --- ★★★ここまで新しいデバッグステップ★★★ ---

      # --- AWS認証 (OIDC) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- ECRへのログイン ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Dockerイメージのビルドとプッシュ (X86_64アーキテクチャ) ---
      - name: Build and push Docker image (X86_64) with Commit SHA Tag
        run: |
          # buildx を使用してマルチプラットフォームビルド環境をセットアップ
          docker buildx create --use
          docker buildx inspect --bootstrap

          # X86_64 (linux/amd64) 用にビルドし、直接ECRにプッシュ
          # PR段階ではコミットハッシュタグのみをプッシュ
          docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} --push .
          echo "Pushed image with tag: ${{ github.sha }}" # ログ出力

          # # マージ時には最新タグもプッシュ
          # docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest --push .
          # echo "Pushed image with tag: latest" # ログ出力


  # ======================================================================
  # Job 2 : Terraform Plan の実行とPull Requestへのコメント
  # ======================================================================
  plan_infra:
    name: Plan Infrastructure Changes
    runs-on: ubuntu-latest
    needs: build_and_push
    outputs:
      tf_plan_exit_code: ${{ steps.plan.outputs.exit_code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- AWS認証 (OIDC) for Terraform ---
      # TF_DEPLOY_ROLE_ARN を使う (TFのplan/apply権限を持つロール)
      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Terraformのセットアップ ---
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # --- Terraform init ---
      - name: Terraform init
        run: terraform init

      # --- Terraform validate (コードの構文チェック) ---
      - name: Terraform validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          # public_subnet_ids_cidr と private_subnet_ids_cidr はリストなので、toJson() でJSON文字列に変換して渡す
          terraform plan -out=tfplan \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="github_repository_name=${{ github.repository }}" \
            # `plan` の変更検知のために exit code を出力 (変更なし=0, 変更あり=2, エラー=1)
            TF_PLAN_EXIT_CODE=$?
            echo "exit_code=$TF_PLAN_EXIT_CODE" >> $GITHUB_OUTPUT

            if [ $TF_PLAN_EXIT_CODE -eq 1 ]; then
              echo "Terraform Plan failed."
              exit 1
            fi

          # terraform show の結果をファイルに保存
          terraform show -no-color tfplan > tfplan.txt || true

      - name: Upload Terraform Plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-artifact
          path: tfplan # プランファイルをアーティファクトとして保存

      - name: Add Terraform Plan to Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('tfplan.txt', 'utf8');

            // チーム開発の際は、以下を別ファイルに保存して、URL遷移させるか、Claude Code SDKなどを使ってSummarizeさせた方が良い。
            // Plan結果は非常に長いため、PRにコメントさせると見づらいため

            // const output = `#### Terraform Plan for PR #${{ github.event.pull_request.number }}
            //              \`\`\`terraform\n${plan}\`\`\``;
            // github.rest.issues.createComment({
            //   issue_number: context.issue.number,
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   body: output
            // });


# ======================================================================
# Job 3 : Terraform Apply と ECS サービス強制デプロイ
# ======================================================================
  apply_infra:
    name: Apply Infrastructure Changes
    runs-on: ubuntu-latest
    needs: plan_infra

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform Plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-artifact
          path: .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # --- デバッグステップ (OIDCトークン確認) は残しつつ、aws-credentials の id を修正 ---
      - name: Configure AWS Credentials for Terraform Apply
        id: aws-credentials-for-apply # ここに id を付与
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Print OIDC token claims
        env:
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ steps.aws-credentials-for-apply.outputs.id-token-request-url }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ steps.aws-credentials-for-apply.outputs.id-token-request-token }}
        run: |
          echo "Attempting to get OIDC token payload..."
          TOKEN_PAYLOAD=$(curl --request POST --url "$ACTIONS_ID_TOKEN_REQUEST_URL" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            --silent | jq -r '.value' | awk -F'.' '{print $2}' | base64 --decode 2>/dev/null | jq -r '.sub')

          if [ -z "$TOKEN_PAYLOAD" ]; then
            echo "Sub claim not found or failed to decode token."
          else
            echo "OIDC Token Sub Claim: $TOKEN_PAYLOAD"
          fi
          echo "Finished getting OIDC token payload."
      # --- ここまでOIDCデバッグステップ ---

      - name: Terraform init (for apply)
        run: terraform init

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan

      # ========================================================================================
      # ★ここから Docker イメージのビルドとプッシュ (Latest Tag) ★
      # ★ECRログインと認証をこのジョブ内で再度行う必要がある★
      # ========================================================================================

      # --- AWS認証 (OIDC) for ECR Push (Latest) ---
      # TF_DEPLOY_ROLE_ARN ではなく ECR_PUSH_ROLE_ARN を使う
      - name: Configure AWS Credentials for ECR Push (Latest)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- ECRへのログイン (Latest Push用) ---
      # 新しいidを付与
      - name: Login to Amazon ECR (Latest Push)
        id: login-ecr-for-latest-push # ★新しいidを付与★
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (X86_64) with Latest Tag
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

          # ★login-ecr-for-latest-push の output を参照する★
          docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr-for-latest-push.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest --push .
          echo "Pushed image with tag: latest"

      # ========================================================================================
      # ★ECSサービス強制デプロイの認証と実行★
      # ========================================================================================

      # --- AWS認証 (OIDC) for ECS Update ---
      - name: Configure AWS Credentials for ECS Update
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service ${{ env.ECS_SERVICE_NAME }} \
            --force-new-deployment

# ======================================================================
# ★★★ここから新しいジョブを追加：データベースマイグレーション★★★
# ======================================================================
  migrate_db:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: apply_infra

    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (contains(github.event.commits.*.modified, 'db_setup.py') || contains(github.event.commits.*.added, 'db_setup.py'))

    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- AWS認証 (OIDC) for DB Migration Task ---
      - name: Configure AWS Credentials for DB Migration
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run Database Migration Task
        run: |

          PRIVATE_SUBNET_IDS_STRING_VALUE="${{ join(vars.PRIVATE_SUBNET_IDS, ',') }}"
          ECS_TASK_SG_ID_STRING_VALUE="${{ vars.ECS_TASK_SG_ID }}"

          echo "DEBUG: PRIVATE_SUBNET_IDS_STRING_VALUE: $PRIVATE_SUBNET_IDS_STRING_VALUE"
          echo "DEBUG: ECS_TASK_SG_ID_STRING_VALUE: $ECS_TASK_SG_ID_STRING_VALUE"

          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition "${{ env.PROJECT_NAME }}-task-def" --query 'taskDefinition.taskDefinitionArn' --output text)

          # マイグレーションタスクを実行
          aws ecs run-task \
            --cluster "${{ env.ECS_CLUSTER_NAME }}" \
            --task-definition "$TASK_DEF_ARN" \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.PRIVATE_SUBNET_IDS_STRING }}],securityGroups=[${{ env.ECS_TASK_SG_ID_STRING }}],assignPublicIp=DISABLED}" \
            --override-container name="${{ env.PROJECT_NAME }}-container",command=["python","db_setup.py"] \
            --started-by "github-actions-migration"

          echo "Database migration task started. Waiting for completion..."
