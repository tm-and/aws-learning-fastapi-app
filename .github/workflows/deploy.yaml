name: Build, Push & Validate Infra

on:
  push:
    branches:
      - main
  pull_request: # PR時にもインフラの検証とplanを走らせる
    branches:
      - main

env:
  PROJECT_NAME: my-fastapi-app
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: my-fastapi-app-app-repo
  PUBLIC_SUBNET_CIDRS_JSON: ${{ toJson(vars.PUBLIC_SUBNET_CIDRS) }}
  PRIVATE_SUBNET_CIDRS_JSON: ${{ toJson(vars.PRIVATE_SUBNET_CIDRS) }}
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write # OIDC認証に必要な権限
  contents: read  # リポジトリのコードを読み込むための権限
  pull-requests: write # PRにコメントするためにこの権限が必要

jobs:
  # ======================================================================
  # Job 1: DockerイメージのビルドとECRへのプッシュ
  # ======================================================================
  build_and_push:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- AWS認証 (OIDC) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- ECRへのログイン ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Dockerイメージのビルドとプッシュ (X86_64アーキテクチャ) ---
      - name: Build and push Docker image (X86_64) with Commit SHA Tag
        run: |
          # buildx を使用してマルチプラットフォームビルド環境をセットアップ
          docker buildx create --use
          docker buildx inspect --bootstrap

          # X86_64 (linux/amd64) 用にビルドし、直接ECRにプッシュ
          # PR段階ではコミットハッシュタグのみをプッシュ
          docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} --push .
          echo "Pushed image with tag: ${{ github.sha }}" # ログ出力

          # # マージ時には最新タグもプッシュ
          # docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest --push .
          # echo "Pushed image with tag: latest" # ログ出力


  # ======================================================================
  # Job 2 : Terraform Plan の実行とPull Requestへのコメント
  # ======================================================================
  plan_infra:
    name: Plan Infrastructure Changes
    runs-on: ubuntu-latest
    needs: build_and_push
    outputs:
      tf_plan_exit_code: ${{ steps.plan.outputs.exit_code }} # planの実行結果を次のjobに渡す

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- AWS認証 (OIDC) for Terraform ---
      # TF_DEPLOY_ROLE_ARN を使う (TFのplan/apply権限を持つロール)
      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Terraformのセットアップ ---
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # --- Terraform init ---
      - name: Terraform init
        run: terraform init

      # --- Terraform validate (コードの構文チェック) ---
      - name: Terraform validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          # public_subnet_ids_cidr と private_subnet_ids_cidr はリストなので、toJson() でJSON文字列に変換して渡す
          terraform plan -out=tfplan \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="github_repository_owner=${{ github.repository_owner }}" \
            -var="github_repository_name=${{ github.repository }}" \

            # `plan` の変更検知のために exit code を出力 (変更なし=0, 変更あり=2, エラー=1)
            TF_PLAN_EXIT_CODE=$?
            echo "exit_code=$TF_PLAN_EXIT_CODE" >> $GITHUB_OUTPUT

            if [ $TF_PLAN_EXIT_CODE -eq 1 ]; then
              echo "Terraform Plan failed."
              exit 1
            fi

          # terraform show の結果をファイルに保存
          terraform show -no-color tfplan > tfplan.txt || true

      - name: Upload Terraform Plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-artifact
          path: tfplan # プランファイルをアーティファクトとして保存

      - name: Add Terraform Plan to Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('tfplan.txt', 'utf8');

            # チーム開発の際は、以下を別ファイルに保存して、URL遷移させるか、Claude Code SDKなどを使ってSummarizeさせた方が良い。
            # Plan結果は非常に長いため、PRにコメントさせると見づらいため

            # const output = `#### Terraform Plan for PR #${{ github.event.pull_request.number }}
            #               \`\`\`terraform\n${plan}\`\`\``;
            # github.rest.issues.createComment({
            #   issue_number: context.issue.number,
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   body: output
            # });